---
import FlexDiv from './FlexDiv.astro'
import Button from './Button.astro'
interface CTAProps {
  explain?: boolean;
  previousButton?: {text: string, href: string};
  color?: 'red' | 'yellow' | 'white';
  header?: string;
  style?: string;
  padding?: string;
}
const {explain, previousButton, color = 'white', header, style, padding} = Astro.props as CTAProps;

const punner = (prop, cssProp) => prop ? (cssProp + ':' + prop + ';') : ''
---
<div class={ `ctadiv cta--${color}` } style={punner(padding, 'padding') + style}>
  {previousButton && <Button as="link" outline leftArrow text={previousButton.text} href={previousButton.href}/>}
  {header && <h3>{header}</h3>}

  <div class="ctaflex" >
    <slot />
  </div>
</div>

<style lang="scss">
  .explanation{
    font-size: 120%;
    max-width: 20rem;
  }
  .ctadiv {
    padding: 3rem 5% 4rem;
    display: flex;
    flex-flow: row wrap;
    width: 114%;
    margin-inline: -7%;
    position: relative;
    align-content: center;
    
    & * {
      z-index: 3;
    }
    & h3 {
      letter-spacing: 0px;
      margin-bottom: 1.2rem;
    }
  }
  .ctaflex{
    display:flex;
    flex-flow: row wrap;
    justify-content: center;
    gap: 8%;
    width: 86%;
    margin-inline: 7%;
  }
  .cta--white {
    background-color: white;
  }
  .cta--red {
    background: radial-gradient(ellipse at bottom right, hsl(var(--color1h), var(--color1s), 50%), hsl(var(--color1h), var(--color1s), 30%) 90%);
    & h3 {
      margin-inline: auto;
      color: white;
    }
    color: white;
    &::after {
      content: '';
      position: absolute;
      width: 100%;
      height: 100%;
      display: block;
      bottom: 0;
      left: 0;
      opacity: 0;
      background: 
        radial-gradient(ellipse at bottom right, hsl(var(--color1h), 60%, 50%), transparent);
      transition: opacity 1s;
      z-index: 1;
    }
    &:hover::after {
      opacity: 1;
    }
  }
  .cta--yellow {
    background-color: hsl(var(--color2hsl));
  }
  
</style>
